#pragma checksum "E:\Np_Year_2.1\SSD Prac\SSD_Team06_ASG_Submission\SSD_Assignment\Pages\Books\Cart.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fa4ad1be1fc07a6386055c5f0c73869f9ab41a33"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(SSD_Assignment.Pages.Books.Pages_Books_Cart), @"mvc.1.0.razor-page", @"/Pages/Books/Cart.cshtml")]
namespace SSD_Assignment.Pages.Books
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\Np_Year_2.1\SSD Prac\SSD_Team06_ASG_Submission\SSD_Assignment\Pages\_ViewImports.cshtml"
using SSD_Assignment;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fa4ad1be1fc07a6386055c5f0c73869f9ab41a33", @"/Pages/Books/Cart.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3872845f068c377210764579bc63f3e798b3ab41", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Books_Cart : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "E:\Np_Year_2.1\SSD Prac\SSD_Team06_ASG_Submission\SSD_Assignment\Pages\Books\Cart.cshtml"
  
    ViewData["Title"] = "Cart";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<style>
    .cart-items {
        float: left;
        margin-left: auto;
        margin-right: auto;
        margin-top: 1em;
        margin-bottom: 5em;
        padding: 0;

        display: grid;
        grid-gap: 1em;
        grid-template-columns: repeat(auto-fit, 23%);
    }
    .cart-item {
        display: flex;
        justify-content: left;
        flex-direction: column;
        padding: 0.5em;
        /*border: 1px solid black;*/
    }
    .cart-item img {
        box-shadow: 0 0 5px black;
    }
    .cart-item > * {
        margin-bottom: 1em;
        display: flex;
        flex-direction: column;
    }
    .cart-item > * > .header{
        font-size: 0.75em;
    }
</style>

<h1>Cart</h1>
<!--<button onclick=""addItemToCart(cartItems)"">Click to show Cart</button>-->
<div class=""cart-items container-fluid""></div>
<button onclick=""checkout()"">Check out</button>
<script>
    let cartItemList = document.querySelector(""div.cart-items"");

    let cartItems = JSO");
            WriteLiteral(@"N.parse(sessionStorage.getItem(""cartItems""));
    console.log(cartItems)

    function addItemToCart(cartItems) {

        if (!cartItems) {
            cartItemList.innerHTML = ""<h2>Your cart is empty. Add some books into your cart!</h2>"";
            return;
        }

        for (var book of cartItems) {

            let { title, price, imgSrc } = book;

            //Create Divs and Spans Elements to be inputted into HTML

            //Cart Item
            let cartItem = document.createElement('div')
            cartItem.className = ""cart-item container-fluid""
            cartItemList.appendChild(cartItem)

            //Cart Image
            let cartImg = document.createElement('img');
            cartImg.src = imgSrc;
            cartItem.appendChild(cartImg);

            //Cart Title
            let cartTitleColumn = document.createElement('div')
            cartTitleColumn.className = ""cart-item-title-column""
            cartItem.appendChild(cartTitleColumn)

      ");
            WriteLiteral(@"      let titleHeader = document.createElement('span')
            titleHeader.className = 'header';
            titleHeader.innerText = 'Title'
            cartTitleColumn.appendChild(titleHeader)

            let cartItemTitle = document.createElement('span')
            cartItemTitle.className = ""cart-item-title""
            cartItemTitle.innerHTML = title
            cartTitleColumn.appendChild(cartItemTitle)

            //Cart Price
            let cartPriceColumn = document.createElement('div')
            cartPriceColumn.className = ""cart-item-price-column""
            cartItem.appendChild(cartPriceColumn)

            let priceHeader = document.createElement('span')
            priceHeader.className = 'header';
            priceHeader.innerText = 'Price'
            cartPriceColumn.appendChild(priceHeader)

            let cartItemPrice = document.createElement('span')
            cartItemPrice.className = ""cart-item-price""
            cartItemPrice.innerHTML = `$${price}`;
   ");
            WriteLiteral(@"         cartPriceColumn.appendChild(cartItemPrice)

            //Cart Quantity
            let cartQuantityColumn = document.createElement('div')
            cartQuantityColumn.className = ""cart-item-quantity-column""
            cartItem.appendChild(cartQuantityColumn)

            let quantityHeader = document.createElement('span')
            quantityHeader.className = 'header';
            quantityHeader.innerText = 'Quantity'
            cartQuantityColumn.appendChild(quantityHeader)

            let cartItemQuantity = document.createElement('input')
            cartItemQuantity.className = ""cart-item-quantity""
            cartItemQuantity.type = ""number""
            cartItemQuantity.value = 1;
            cartItemQuantity.placeholder = 'Enter quantity'
            cartItemQuantity.onchange = e => {
                if (!cartItemQuantity.value) {
                    cartItemQuantity.value = 1;
                }

                var itemQuantity = cartItemQuantity.value;
           ");
            WriteLiteral(@"     var subtotalPrice = itemQuantity * price;
                cartItemSubtotal.innerText = `$${subtotalPrice}`;
            }
            cartQuantityColumn.appendChild(cartItemQuantity)

            //Cart Subtotal
            let cartSubtotalColumn = document.createElement('div')
            cartSubtotalColumn.className = ""cart-item-subtotal-column""
            cartItem.appendChild(cartSubtotalColumn)

            let subtotalHeader = document.createElement('span')
            subtotalHeader.className = 'header';
            subtotalHeader.innerText = 'Subtotal'
            cartSubtotalColumn.appendChild(subtotalHeader)

            let cartItemSubtotal = document.createElement('span')
            cartItemSubtotal.className = ""cart-item-subtotal""
            cartItemQuantity.onchange();
            cartSubtotalColumn.appendChild(cartItemSubtotal)

        }

    }
    addItemToCart(cartItems);

    function checkout() {
        let cartItems = JSON.parse(sessionStorage.getItem(""ca");
            WriteLiteral("rtItems\"));\r\n\r\n        console.log(\"check out\");\r\n        //Bring users to the payment page\r\n        if (cartItems.length > 0) {\r\n            window.location.href = \'.././PaymentPage/Payment\';\r\n        }\r\n    }\r\n\r\n</script>\r\n\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<SSD_Assignment.Pages.Books.CartModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<SSD_Assignment.Pages.Books.CartModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<SSD_Assignment.Pages.Books.CartModel>)PageContext?.ViewData;
        public SSD_Assignment.Pages.Books.CartModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
